// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Temp/Proto/Table_ItemInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Temp/Proto/Table_ItemInfo.proto</summary>
public static partial class TableItemInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for Temp/Proto/Table_ItemInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TableItemInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch9UZW1wL1Byb3RvL1RhYmxlX0l0ZW1JbmZvLnByb3RvIi8KDEl0ZW1FeGNo",
          "YW5nZRIOCgZJdGVtSWQYASABKAUSDwoHSXRlbU51bRgCIAEoBSK8BAoMUm93",
          "X0l0ZW1JbmZvEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSEAoIdHlwZVRp",
          "cHMYAyABKAkSEAoIbWFpblR5cGUYBCABKAUSDwoHcXVhbGl0eRgFIAEoBRIP",
          "CgdmdW5kZXNjGAYgASgJEhIKCmNsaWVudGRlc2MYByABKAkSDAoEaWNvbhgI",
          "IAEoCRIQCghtaW5pSWNvbhgJIAEoCRIYChBtYXhTdXBlclBvc2l0aW9uGAog",
          "ASgJEhAKCHNlbGxSdWxlGAsgASgFEhEKCXNlbGxQcmljZRgMIAEoBRIQCghi",
          "YXRjaFVzZRgNIAEoBRIYCgttYXhCYXRjaFVzZRgOIAEoBToDNTAwEhQKDHVz",
          "ZUxldmVsRG93bhgPIAEoBRIRCgl0aW1lUGFyYW0YECABKAUSDwoHdXNlVHlw",
          "ZRgRIAEoBRIQCgh1c2VQYXJhbRgSIAMoCRIUCgx1c2VDb25kaXRpb24YEyAB",
          "KAkSFAoMY29tcG9zZVBhcmFtGBQgAygFEhAKCHNob3dtYXJrGBUgASgFEhEK",
          "CXNob3dJbkJhZxgWIAEoBRISCgppc0N1cnJlbmN5GBcgASgFEiMKDGl0ZW1F",
          "eGNoYW5nZRgYIAMoCzINLkl0ZW1FeGNoYW5nZRINCgV3YXlJRBgZIAMoBRIU",
          "CgxSZWxhdGlvblR5cGUYGiABKAUSCwoDdGFnGBsgASgFEhEKCWF1dG9tYXRp",
          "YxgcIAEoBRISCgpxdWlja2x5VXNlGB0gASgFIi4KDlRhYmxlX0l0ZW1JbmZv",
          "EhwKBWRhdGFzGAEgAygLMg0uUm93X0l0ZW1JbmZv"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ItemExchange), global::ItemExchange.Parser, new[]{ "ItemId", "ItemNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Row_ItemInfo), global::Row_ItemInfo.Parser, new[]{ "Id", "Name", "TypeTips", "MainType", "Quality", "Fundesc", "Clientdesc", "Icon", "MiniIcon", "MaxSuperPosition", "SellRule", "SellPrice", "BatchUse", "MaxBatchUse", "UseLevelDown", "TimeParam", "UseType", "UseParam", "UseCondition", "ComposeParam", "Showmark", "ShowInBag", "IsCurrency", "ItemExchange", "WayID", "RelationType", "Tag", "Automatic", "QuicklyUse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Table_ItemInfo), global::Table_ItemInfo.Parser, new[]{ "Datas" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ItemExchange : pb::IMessage<ItemExchange>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ItemExchange> _parser = new pb::MessageParser<ItemExchange>(() => new ItemExchange());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ItemExchange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TableItemInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ItemExchange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ItemExchange(ItemExchange other) : this() {
    _hasBits0 = other._hasBits0;
    itemId_ = other.itemId_;
    itemNum_ = other.itemNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ItemExchange Clone() {
    return new ItemExchange(this);
  }

  /// <summary>Field number for the "ItemId" field.</summary>
  public const int ItemIdFieldNumber = 1;
  private readonly static int ItemIdDefaultValue = 0;

  private int itemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ItemId {
    get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      itemId_ = value;
    }
  }
  /// <summary>Gets whether the "ItemId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasItemId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ItemId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearItemId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ItemNum" field.</summary>
  public const int ItemNumFieldNumber = 2;
  private readonly static int ItemNumDefaultValue = 0;

  private int itemNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ItemNum {
    get { if ((_hasBits0 & 2) != 0) { return itemNum_; } else { return ItemNumDefaultValue; } }
    set {
      _hasBits0 |= 2;
      itemNum_ = value;
    }
  }
  /// <summary>Gets whether the "ItemNum" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasItemNum {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ItemNum" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearItemNum() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ItemExchange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ItemExchange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemId != other.ItemId) return false;
    if (ItemNum != other.ItemNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasItemId) hash ^= ItemId.GetHashCode();
    if (HasItemNum) hash ^= ItemNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasItemId) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemId);
    }
    if (HasItemNum) {
      output.WriteRawTag(16);
      output.WriteInt32(ItemNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasItemId) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemId);
    }
    if (HasItemNum) {
      output.WriteRawTag(16);
      output.WriteInt32(ItemNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasItemId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
    }
    if (HasItemNum) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ItemExchange other) {
    if (other == null) {
      return;
    }
    if (other.HasItemId) {
      ItemId = other.ItemId;
    }
    if (other.HasItemNum) {
      ItemNum = other.ItemNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ItemId = input.ReadInt32();
          break;
        }
        case 16: {
          ItemNum = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ItemId = input.ReadInt32();
          break;
        }
        case 16: {
          ItemNum = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Row_ItemInfo : pb::IMessage<Row_ItemInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Row_ItemInfo> _parser = new pb::MessageParser<Row_ItemInfo>(() => new Row_ItemInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Row_ItemInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TableItemInfoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Row_ItemInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Row_ItemInfo(Row_ItemInfo other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    typeTips_ = other.typeTips_;
    mainType_ = other.mainType_;
    quality_ = other.quality_;
    fundesc_ = other.fundesc_;
    clientdesc_ = other.clientdesc_;
    icon_ = other.icon_;
    miniIcon_ = other.miniIcon_;
    maxSuperPosition_ = other.maxSuperPosition_;
    sellRule_ = other.sellRule_;
    sellPrice_ = other.sellPrice_;
    batchUse_ = other.batchUse_;
    maxBatchUse_ = other.maxBatchUse_;
    useLevelDown_ = other.useLevelDown_;
    timeParam_ = other.timeParam_;
    useType_ = other.useType_;
    useParam_ = other.useParam_.Clone();
    useCondition_ = other.useCondition_;
    composeParam_ = other.composeParam_.Clone();
    showmark_ = other.showmark_;
    showInBag_ = other.showInBag_;
    isCurrency_ = other.isCurrency_;
    itemExchange_ = other.itemExchange_.Clone();
    wayID_ = other.wayID_.Clone();
    relationType_ = other.relationType_;
    tag_ = other.tag_;
    automatic_ = other.automatic_;
    quicklyUse_ = other.quicklyUse_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Row_ItemInfo Clone() {
    return new Row_ItemInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "typeTips" field.</summary>
  public const int TypeTipsFieldNumber = 3;
  private readonly static string TypeTipsDefaultValue = "";

  private string typeTips_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TypeTips {
    get { return typeTips_ ?? TypeTipsDefaultValue; }
    set {
      typeTips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "typeTips" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTypeTips {
    get { return typeTips_ != null; }
  }
  /// <summary>Clears the value of the "typeTips" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTypeTips() {
    typeTips_ = null;
  }

  /// <summary>Field number for the "mainType" field.</summary>
  public const int MainTypeFieldNumber = 4;
  private readonly static int MainTypeDefaultValue = 0;

  private int mainType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MainType {
    get { if ((_hasBits0 & 2) != 0) { return mainType_; } else { return MainTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      mainType_ = value;
    }
  }
  /// <summary>Gets whether the "mainType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMainType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "mainType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMainType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "quality" field.</summary>
  public const int QualityFieldNumber = 5;
  private readonly static int QualityDefaultValue = 0;

  private int quality_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Quality {
    get { if ((_hasBits0 & 4) != 0) { return quality_; } else { return QualityDefaultValue; } }
    set {
      _hasBits0 |= 4;
      quality_ = value;
    }
  }
  /// <summary>Gets whether the "quality" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuality {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "quality" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuality() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "fundesc" field.</summary>
  public const int FundescFieldNumber = 6;
  private readonly static string FundescDefaultValue = "";

  private string fundesc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Fundesc {
    get { return fundesc_ ?? FundescDefaultValue; }
    set {
      fundesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "fundesc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFundesc {
    get { return fundesc_ != null; }
  }
  /// <summary>Clears the value of the "fundesc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFundesc() {
    fundesc_ = null;
  }

  /// <summary>Field number for the "clientdesc" field.</summary>
  public const int ClientdescFieldNumber = 7;
  private readonly static string ClientdescDefaultValue = "";

  private string clientdesc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clientdesc {
    get { return clientdesc_ ?? ClientdescDefaultValue; }
    set {
      clientdesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientdesc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientdesc {
    get { return clientdesc_ != null; }
  }
  /// <summary>Clears the value of the "clientdesc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientdesc() {
    clientdesc_ = null;
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 8;
  private readonly static string IconDefaultValue = "";

  private string icon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Icon {
    get { return icon_ ?? IconDefaultValue; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIcon {
    get { return icon_ != null; }
  }
  /// <summary>Clears the value of the "icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIcon() {
    icon_ = null;
  }

  /// <summary>Field number for the "miniIcon" field.</summary>
  public const int MiniIconFieldNumber = 9;
  private readonly static string MiniIconDefaultValue = "";

  private string miniIcon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MiniIcon {
    get { return miniIcon_ ?? MiniIconDefaultValue; }
    set {
      miniIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "miniIcon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMiniIcon {
    get { return miniIcon_ != null; }
  }
  /// <summary>Clears the value of the "miniIcon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMiniIcon() {
    miniIcon_ = null;
  }

  /// <summary>Field number for the "maxSuperPosition" field.</summary>
  public const int MaxSuperPositionFieldNumber = 10;
  private readonly static string MaxSuperPositionDefaultValue = "";

  private string maxSuperPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MaxSuperPosition {
    get { return maxSuperPosition_ ?? MaxSuperPositionDefaultValue; }
    set {
      maxSuperPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "maxSuperPosition" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxSuperPosition {
    get { return maxSuperPosition_ != null; }
  }
  /// <summary>Clears the value of the "maxSuperPosition" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxSuperPosition() {
    maxSuperPosition_ = null;
  }

  /// <summary>Field number for the "sellRule" field.</summary>
  public const int SellRuleFieldNumber = 11;
  private readonly static int SellRuleDefaultValue = 0;

  private int sellRule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SellRule {
    get { if ((_hasBits0 & 8) != 0) { return sellRule_; } else { return SellRuleDefaultValue; } }
    set {
      _hasBits0 |= 8;
      sellRule_ = value;
    }
  }
  /// <summary>Gets whether the "sellRule" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSellRule {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "sellRule" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSellRule() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "sellPrice" field.</summary>
  public const int SellPriceFieldNumber = 12;
  private readonly static int SellPriceDefaultValue = 0;

  private int sellPrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SellPrice {
    get { if ((_hasBits0 & 16) != 0) { return sellPrice_; } else { return SellPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      sellPrice_ = value;
    }
  }
  /// <summary>Gets whether the "sellPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSellPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "sellPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSellPrice() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "batchUse" field.</summary>
  public const int BatchUseFieldNumber = 13;
  private readonly static int BatchUseDefaultValue = 0;

  private int batchUse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BatchUse {
    get { if ((_hasBits0 & 32) != 0) { return batchUse_; } else { return BatchUseDefaultValue; } }
    set {
      _hasBits0 |= 32;
      batchUse_ = value;
    }
  }
  /// <summary>Gets whether the "batchUse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBatchUse {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "batchUse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBatchUse() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "maxBatchUse" field.</summary>
  public const int MaxBatchUseFieldNumber = 14;
  private readonly static int MaxBatchUseDefaultValue = 500;

  private int maxBatchUse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MaxBatchUse {
    get { if ((_hasBits0 & 64) != 0) { return maxBatchUse_; } else { return MaxBatchUseDefaultValue; } }
    set {
      _hasBits0 |= 64;
      maxBatchUse_ = value;
    }
  }
  /// <summary>Gets whether the "maxBatchUse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxBatchUse {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "maxBatchUse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxBatchUse() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "useLevelDown" field.</summary>
  public const int UseLevelDownFieldNumber = 15;
  private readonly static int UseLevelDownDefaultValue = 0;

  private int useLevelDown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UseLevelDown {
    get { if ((_hasBits0 & 128) != 0) { return useLevelDown_; } else { return UseLevelDownDefaultValue; } }
    set {
      _hasBits0 |= 128;
      useLevelDown_ = value;
    }
  }
  /// <summary>Gets whether the "useLevelDown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUseLevelDown {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "useLevelDown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUseLevelDown() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "timeParam" field.</summary>
  public const int TimeParamFieldNumber = 16;
  private readonly static int TimeParamDefaultValue = 0;

  private int timeParam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TimeParam {
    get { if ((_hasBits0 & 256) != 0) { return timeParam_; } else { return TimeParamDefaultValue; } }
    set {
      _hasBits0 |= 256;
      timeParam_ = value;
    }
  }
  /// <summary>Gets whether the "timeParam" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimeParam {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "timeParam" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimeParam() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "useType" field.</summary>
  public const int UseTypeFieldNumber = 17;
  private readonly static int UseTypeDefaultValue = 0;

  private int useType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UseType {
    get { if ((_hasBits0 & 512) != 0) { return useType_; } else { return UseTypeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      useType_ = value;
    }
  }
  /// <summary>Gets whether the "useType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUseType {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "useType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUseType() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "useParam" field.</summary>
  public const int UseParamFieldNumber = 18;
  private static readonly pb::FieldCodec<string> _repeated_useParam_codec
      = pb::FieldCodec.ForString(146);
  private readonly pbc::RepeatedField<string> useParam_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> UseParam {
    get { return useParam_; }
  }

  /// <summary>Field number for the "useCondition" field.</summary>
  public const int UseConditionFieldNumber = 19;
  private readonly static string UseConditionDefaultValue = "";

  private string useCondition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string UseCondition {
    get { return useCondition_ ?? UseConditionDefaultValue; }
    set {
      useCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "useCondition" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUseCondition {
    get { return useCondition_ != null; }
  }
  /// <summary>Clears the value of the "useCondition" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUseCondition() {
    useCondition_ = null;
  }

  /// <summary>Field number for the "composeParam" field.</summary>
  public const int ComposeParamFieldNumber = 20;
  private static readonly pb::FieldCodec<int> _repeated_composeParam_codec
      = pb::FieldCodec.ForInt32(160);
  private readonly pbc::RepeatedField<int> composeParam_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<int> ComposeParam {
    get { return composeParam_; }
  }

  /// <summary>Field number for the "showmark" field.</summary>
  public const int ShowmarkFieldNumber = 21;
  private readonly static int ShowmarkDefaultValue = 0;

  private int showmark_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Showmark {
    get { if ((_hasBits0 & 1024) != 0) { return showmark_; } else { return ShowmarkDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      showmark_ = value;
    }
  }
  /// <summary>Gets whether the "showmark" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowmark {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "showmark" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowmark() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "showInBag" field.</summary>
  public const int ShowInBagFieldNumber = 22;
  private readonly static int ShowInBagDefaultValue = 0;

  private int showInBag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ShowInBag {
    get { if ((_hasBits0 & 2048) != 0) { return showInBag_; } else { return ShowInBagDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      showInBag_ = value;
    }
  }
  /// <summary>Gets whether the "showInBag" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowInBag {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "showInBag" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowInBag() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "isCurrency" field.</summary>
  public const int IsCurrencyFieldNumber = 23;
  private readonly static int IsCurrencyDefaultValue = 0;

  private int isCurrency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IsCurrency {
    get { if ((_hasBits0 & 4096) != 0) { return isCurrency_; } else { return IsCurrencyDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      isCurrency_ = value;
    }
  }
  /// <summary>Gets whether the "isCurrency" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsCurrency {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "isCurrency" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsCurrency() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "itemExchange" field.</summary>
  public const int ItemExchangeFieldNumber = 24;
  private static readonly pb::FieldCodec<global::ItemExchange> _repeated_itemExchange_codec
      = pb::FieldCodec.ForMessage(194, global::ItemExchange.Parser);
  private readonly pbc::RepeatedField<global::ItemExchange> itemExchange_ = new pbc::RepeatedField<global::ItemExchange>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ItemExchange> ItemExchange {
    get { return itemExchange_; }
  }

  /// <summary>Field number for the "wayID" field.</summary>
  public const int WayIDFieldNumber = 25;
  private static readonly pb::FieldCodec<int> _repeated_wayID_codec
      = pb::FieldCodec.ForInt32(200);
  private readonly pbc::RepeatedField<int> wayID_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<int> WayID {
    get { return wayID_; }
  }

  /// <summary>Field number for the "RelationType" field.</summary>
  public const int RelationTypeFieldNumber = 26;
  private readonly static int RelationTypeDefaultValue = 0;

  private int relationType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RelationType {
    get { if ((_hasBits0 & 8192) != 0) { return relationType_; } else { return RelationTypeDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      relationType_ = value;
    }
  }
  /// <summary>Gets whether the "RelationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelationType {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "RelationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelationType() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "tag" field.</summary>
  public const int TagFieldNumber = 27;
  private readonly static int TagDefaultValue = 0;

  private int tag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Tag {
    get { if ((_hasBits0 & 16384) != 0) { return tag_; } else { return TagDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      tag_ = value;
    }
  }
  /// <summary>Gets whether the "tag" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTag {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "tag" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTag() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "automatic" field.</summary>
  public const int AutomaticFieldNumber = 28;
  private readonly static int AutomaticDefaultValue = 0;

  private int automatic_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Automatic {
    get { if ((_hasBits0 & 32768) != 0) { return automatic_; } else { return AutomaticDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      automatic_ = value;
    }
  }
  /// <summary>Gets whether the "automatic" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutomatic {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "automatic" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutomatic() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "quicklyUse" field.</summary>
  public const int QuicklyUseFieldNumber = 29;
  private readonly static int QuicklyUseDefaultValue = 0;

  private int quicklyUse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int QuicklyUse {
    get { if ((_hasBits0 & 65536) != 0) { return quicklyUse_; } else { return QuicklyUseDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      quicklyUse_ = value;
    }
  }
  /// <summary>Gets whether the "quicklyUse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuicklyUse {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "quicklyUse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuicklyUse() {
    _hasBits0 &= ~65536;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Row_ItemInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Row_ItemInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (TypeTips != other.TypeTips) return false;
    if (MainType != other.MainType) return false;
    if (Quality != other.Quality) return false;
    if (Fundesc != other.Fundesc) return false;
    if (Clientdesc != other.Clientdesc) return false;
    if (Icon != other.Icon) return false;
    if (MiniIcon != other.MiniIcon) return false;
    if (MaxSuperPosition != other.MaxSuperPosition) return false;
    if (SellRule != other.SellRule) return false;
    if (SellPrice != other.SellPrice) return false;
    if (BatchUse != other.BatchUse) return false;
    if (MaxBatchUse != other.MaxBatchUse) return false;
    if (UseLevelDown != other.UseLevelDown) return false;
    if (TimeParam != other.TimeParam) return false;
    if (UseType != other.UseType) return false;
    if(!useParam_.Equals(other.useParam_)) return false;
    if (UseCondition != other.UseCondition) return false;
    if(!composeParam_.Equals(other.composeParam_)) return false;
    if (Showmark != other.Showmark) return false;
    if (ShowInBag != other.ShowInBag) return false;
    if (IsCurrency != other.IsCurrency) return false;
    if(!itemExchange_.Equals(other.itemExchange_)) return false;
    if(!wayID_.Equals(other.wayID_)) return false;
    if (RelationType != other.RelationType) return false;
    if (Tag != other.Tag) return false;
    if (Automatic != other.Automatic) return false;
    if (QuicklyUse != other.QuicklyUse) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasTypeTips) hash ^= TypeTips.GetHashCode();
    if (HasMainType) hash ^= MainType.GetHashCode();
    if (HasQuality) hash ^= Quality.GetHashCode();
    if (HasFundesc) hash ^= Fundesc.GetHashCode();
    if (HasClientdesc) hash ^= Clientdesc.GetHashCode();
    if (HasIcon) hash ^= Icon.GetHashCode();
    if (HasMiniIcon) hash ^= MiniIcon.GetHashCode();
    if (HasMaxSuperPosition) hash ^= MaxSuperPosition.GetHashCode();
    if (HasSellRule) hash ^= SellRule.GetHashCode();
    if (HasSellPrice) hash ^= SellPrice.GetHashCode();
    if (HasBatchUse) hash ^= BatchUse.GetHashCode();
    if (HasMaxBatchUse) hash ^= MaxBatchUse.GetHashCode();
    if (HasUseLevelDown) hash ^= UseLevelDown.GetHashCode();
    if (HasTimeParam) hash ^= TimeParam.GetHashCode();
    if (HasUseType) hash ^= UseType.GetHashCode();
    hash ^= useParam_.GetHashCode();
    if (HasUseCondition) hash ^= UseCondition.GetHashCode();
    hash ^= composeParam_.GetHashCode();
    if (HasShowmark) hash ^= Showmark.GetHashCode();
    if (HasShowInBag) hash ^= ShowInBag.GetHashCode();
    if (HasIsCurrency) hash ^= IsCurrency.GetHashCode();
    hash ^= itemExchange_.GetHashCode();
    hash ^= wayID_.GetHashCode();
    if (HasRelationType) hash ^= RelationType.GetHashCode();
    if (HasTag) hash ^= Tag.GetHashCode();
    if (HasAutomatic) hash ^= Automatic.GetHashCode();
    if (HasQuicklyUse) hash ^= QuicklyUse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasTypeTips) {
      output.WriteRawTag(26);
      output.WriteString(TypeTips);
    }
    if (HasMainType) {
      output.WriteRawTag(32);
      output.WriteInt32(MainType);
    }
    if (HasQuality) {
      output.WriteRawTag(40);
      output.WriteInt32(Quality);
    }
    if (HasFundesc) {
      output.WriteRawTag(50);
      output.WriteString(Fundesc);
    }
    if (HasClientdesc) {
      output.WriteRawTag(58);
      output.WriteString(Clientdesc);
    }
    if (HasIcon) {
      output.WriteRawTag(66);
      output.WriteString(Icon);
    }
    if (HasMiniIcon) {
      output.WriteRawTag(74);
      output.WriteString(MiniIcon);
    }
    if (HasMaxSuperPosition) {
      output.WriteRawTag(82);
      output.WriteString(MaxSuperPosition);
    }
    if (HasSellRule) {
      output.WriteRawTag(88);
      output.WriteInt32(SellRule);
    }
    if (HasSellPrice) {
      output.WriteRawTag(96);
      output.WriteInt32(SellPrice);
    }
    if (HasBatchUse) {
      output.WriteRawTag(104);
      output.WriteInt32(BatchUse);
    }
    if (HasMaxBatchUse) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxBatchUse);
    }
    if (HasUseLevelDown) {
      output.WriteRawTag(120);
      output.WriteInt32(UseLevelDown);
    }
    if (HasTimeParam) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(TimeParam);
    }
    if (HasUseType) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(UseType);
    }
    useParam_.WriteTo(output, _repeated_useParam_codec);
    if (HasUseCondition) {
      output.WriteRawTag(154, 1);
      output.WriteString(UseCondition);
    }
    composeParam_.WriteTo(output, _repeated_composeParam_codec);
    if (HasShowmark) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(Showmark);
    }
    if (HasShowInBag) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(ShowInBag);
    }
    if (HasIsCurrency) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(IsCurrency);
    }
    itemExchange_.WriteTo(output, _repeated_itemExchange_codec);
    wayID_.WriteTo(output, _repeated_wayID_codec);
    if (HasRelationType) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(RelationType);
    }
    if (HasTag) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(Tag);
    }
    if (HasAutomatic) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(Automatic);
    }
    if (HasQuicklyUse) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(QuicklyUse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasTypeTips) {
      output.WriteRawTag(26);
      output.WriteString(TypeTips);
    }
    if (HasMainType) {
      output.WriteRawTag(32);
      output.WriteInt32(MainType);
    }
    if (HasQuality) {
      output.WriteRawTag(40);
      output.WriteInt32(Quality);
    }
    if (HasFundesc) {
      output.WriteRawTag(50);
      output.WriteString(Fundesc);
    }
    if (HasClientdesc) {
      output.WriteRawTag(58);
      output.WriteString(Clientdesc);
    }
    if (HasIcon) {
      output.WriteRawTag(66);
      output.WriteString(Icon);
    }
    if (HasMiniIcon) {
      output.WriteRawTag(74);
      output.WriteString(MiniIcon);
    }
    if (HasMaxSuperPosition) {
      output.WriteRawTag(82);
      output.WriteString(MaxSuperPosition);
    }
    if (HasSellRule) {
      output.WriteRawTag(88);
      output.WriteInt32(SellRule);
    }
    if (HasSellPrice) {
      output.WriteRawTag(96);
      output.WriteInt32(SellPrice);
    }
    if (HasBatchUse) {
      output.WriteRawTag(104);
      output.WriteInt32(BatchUse);
    }
    if (HasMaxBatchUse) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxBatchUse);
    }
    if (HasUseLevelDown) {
      output.WriteRawTag(120);
      output.WriteInt32(UseLevelDown);
    }
    if (HasTimeParam) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(TimeParam);
    }
    if (HasUseType) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(UseType);
    }
    useParam_.WriteTo(ref output, _repeated_useParam_codec);
    if (HasUseCondition) {
      output.WriteRawTag(154, 1);
      output.WriteString(UseCondition);
    }
    composeParam_.WriteTo(ref output, _repeated_composeParam_codec);
    if (HasShowmark) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(Showmark);
    }
    if (HasShowInBag) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(ShowInBag);
    }
    if (HasIsCurrency) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(IsCurrency);
    }
    itemExchange_.WriteTo(ref output, _repeated_itemExchange_codec);
    wayID_.WriteTo(ref output, _repeated_wayID_codec);
    if (HasRelationType) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(RelationType);
    }
    if (HasTag) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(Tag);
    }
    if (HasAutomatic) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(Automatic);
    }
    if (HasQuicklyUse) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(QuicklyUse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasTypeTips) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeTips);
    }
    if (HasMainType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainType);
    }
    if (HasQuality) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
    }
    if (HasFundesc) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Fundesc);
    }
    if (HasClientdesc) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clientdesc);
    }
    if (HasIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (HasMiniIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MiniIcon);
    }
    if (HasMaxSuperPosition) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxSuperPosition);
    }
    if (HasSellRule) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellRule);
    }
    if (HasSellPrice) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellPrice);
    }
    if (HasBatchUse) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchUse);
    }
    if (HasMaxBatchUse) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBatchUse);
    }
    if (HasUseLevelDown) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseLevelDown);
    }
    if (HasTimeParam) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeParam);
    }
    if (HasUseType) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(UseType);
    }
    size += useParam_.CalculateSize(_repeated_useParam_codec);
    if (HasUseCondition) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(UseCondition);
    }
    size += composeParam_.CalculateSize(_repeated_composeParam_codec);
    if (HasShowmark) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Showmark);
    }
    if (HasShowInBag) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShowInBag);
    }
    if (HasIsCurrency) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsCurrency);
    }
    size += itemExchange_.CalculateSize(_repeated_itemExchange_codec);
    size += wayID_.CalculateSize(_repeated_wayID_codec);
    if (HasRelationType) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelationType);
    }
    if (HasTag) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
    }
    if (HasAutomatic) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Automatic);
    }
    if (HasQuicklyUse) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(QuicklyUse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Row_ItemInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasTypeTips) {
      TypeTips = other.TypeTips;
    }
    if (other.HasMainType) {
      MainType = other.MainType;
    }
    if (other.HasQuality) {
      Quality = other.Quality;
    }
    if (other.HasFundesc) {
      Fundesc = other.Fundesc;
    }
    if (other.HasClientdesc) {
      Clientdesc = other.Clientdesc;
    }
    if (other.HasIcon) {
      Icon = other.Icon;
    }
    if (other.HasMiniIcon) {
      MiniIcon = other.MiniIcon;
    }
    if (other.HasMaxSuperPosition) {
      MaxSuperPosition = other.MaxSuperPosition;
    }
    if (other.HasSellRule) {
      SellRule = other.SellRule;
    }
    if (other.HasSellPrice) {
      SellPrice = other.SellPrice;
    }
    if (other.HasBatchUse) {
      BatchUse = other.BatchUse;
    }
    if (other.HasMaxBatchUse) {
      MaxBatchUse = other.MaxBatchUse;
    }
    if (other.HasUseLevelDown) {
      UseLevelDown = other.UseLevelDown;
    }
    if (other.HasTimeParam) {
      TimeParam = other.TimeParam;
    }
    if (other.HasUseType) {
      UseType = other.UseType;
    }
    useParam_.Add(other.useParam_);
    if (other.HasUseCondition) {
      UseCondition = other.UseCondition;
    }
    composeParam_.Add(other.composeParam_);
    if (other.HasShowmark) {
      Showmark = other.Showmark;
    }
    if (other.HasShowInBag) {
      ShowInBag = other.ShowInBag;
    }
    if (other.HasIsCurrency) {
      IsCurrency = other.IsCurrency;
    }
    itemExchange_.Add(other.itemExchange_);
    wayID_.Add(other.wayID_);
    if (other.HasRelationType) {
      RelationType = other.RelationType;
    }
    if (other.HasTag) {
      Tag = other.Tag;
    }
    if (other.HasAutomatic) {
      Automatic = other.Automatic;
    }
    if (other.HasQuicklyUse) {
      QuicklyUse = other.QuicklyUse;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          TypeTips = input.ReadString();
          break;
        }
        case 32: {
          MainType = input.ReadInt32();
          break;
        }
        case 40: {
          Quality = input.ReadInt32();
          break;
        }
        case 50: {
          Fundesc = input.ReadString();
          break;
        }
        case 58: {
          Clientdesc = input.ReadString();
          break;
        }
        case 66: {
          Icon = input.ReadString();
          break;
        }
        case 74: {
          MiniIcon = input.ReadString();
          break;
        }
        case 82: {
          MaxSuperPosition = input.ReadString();
          break;
        }
        case 88: {
          SellRule = input.ReadInt32();
          break;
        }
        case 96: {
          SellPrice = input.ReadInt32();
          break;
        }
        case 104: {
          BatchUse = input.ReadInt32();
          break;
        }
        case 112: {
          MaxBatchUse = input.ReadInt32();
          break;
        }
        case 120: {
          UseLevelDown = input.ReadInt32();
          break;
        }
        case 128: {
          TimeParam = input.ReadInt32();
          break;
        }
        case 136: {
          UseType = input.ReadInt32();
          break;
        }
        case 146: {
          useParam_.AddEntriesFrom(input, _repeated_useParam_codec);
          break;
        }
        case 154: {
          UseCondition = input.ReadString();
          break;
        }
        case 162:
        case 160: {
          composeParam_.AddEntriesFrom(input, _repeated_composeParam_codec);
          break;
        }
        case 168: {
          Showmark = input.ReadInt32();
          break;
        }
        case 176: {
          ShowInBag = input.ReadInt32();
          break;
        }
        case 184: {
          IsCurrency = input.ReadInt32();
          break;
        }
        case 194: {
          itemExchange_.AddEntriesFrom(input, _repeated_itemExchange_codec);
          break;
        }
        case 202:
        case 200: {
          wayID_.AddEntriesFrom(input, _repeated_wayID_codec);
          break;
        }
        case 208: {
          RelationType = input.ReadInt32();
          break;
        }
        case 216: {
          Tag = input.ReadInt32();
          break;
        }
        case 224: {
          Automatic = input.ReadInt32();
          break;
        }
        case 232: {
          QuicklyUse = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          TypeTips = input.ReadString();
          break;
        }
        case 32: {
          MainType = input.ReadInt32();
          break;
        }
        case 40: {
          Quality = input.ReadInt32();
          break;
        }
        case 50: {
          Fundesc = input.ReadString();
          break;
        }
        case 58: {
          Clientdesc = input.ReadString();
          break;
        }
        case 66: {
          Icon = input.ReadString();
          break;
        }
        case 74: {
          MiniIcon = input.ReadString();
          break;
        }
        case 82: {
          MaxSuperPosition = input.ReadString();
          break;
        }
        case 88: {
          SellRule = input.ReadInt32();
          break;
        }
        case 96: {
          SellPrice = input.ReadInt32();
          break;
        }
        case 104: {
          BatchUse = input.ReadInt32();
          break;
        }
        case 112: {
          MaxBatchUse = input.ReadInt32();
          break;
        }
        case 120: {
          UseLevelDown = input.ReadInt32();
          break;
        }
        case 128: {
          TimeParam = input.ReadInt32();
          break;
        }
        case 136: {
          UseType = input.ReadInt32();
          break;
        }
        case 146: {
          useParam_.AddEntriesFrom(ref input, _repeated_useParam_codec);
          break;
        }
        case 154: {
          UseCondition = input.ReadString();
          break;
        }
        case 162:
        case 160: {
          composeParam_.AddEntriesFrom(ref input, _repeated_composeParam_codec);
          break;
        }
        case 168: {
          Showmark = input.ReadInt32();
          break;
        }
        case 176: {
          ShowInBag = input.ReadInt32();
          break;
        }
        case 184: {
          IsCurrency = input.ReadInt32();
          break;
        }
        case 194: {
          itemExchange_.AddEntriesFrom(ref input, _repeated_itemExchange_codec);
          break;
        }
        case 202:
        case 200: {
          wayID_.AddEntriesFrom(ref input, _repeated_wayID_codec);
          break;
        }
        case 208: {
          RelationType = input.ReadInt32();
          break;
        }
        case 216: {
          Tag = input.ReadInt32();
          break;
        }
        case 224: {
          Automatic = input.ReadInt32();
          break;
        }
        case 232: {
          QuicklyUse = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Table_ItemInfo : pb::IMessage<Table_ItemInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Table_ItemInfo> _parser = new pb::MessageParser<Table_ItemInfo>(() => new Table_ItemInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Table_ItemInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TableItemInfoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Table_ItemInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Table_ItemInfo(Table_ItemInfo other) : this() {
    datas_ = other.datas_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Table_ItemInfo Clone() {
    return new Table_ItemInfo(this);
  }

  /// <summary>Field number for the "datas" field.</summary>
  public const int DatasFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Row_ItemInfo> _repeated_datas_codec
      = pb::FieldCodec.ForMessage(10, global::Row_ItemInfo.Parser);
  private readonly pbc::RepeatedField<global::Row_ItemInfo> datas_ = new pbc::RepeatedField<global::Row_ItemInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::Row_ItemInfo> Datas {
    get { return datas_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Table_ItemInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Table_ItemInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!datas_.Equals(other.datas_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= datas_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    datas_.WriteTo(output, _repeated_datas_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    datas_.WriteTo(ref output, _repeated_datas_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += datas_.CalculateSize(_repeated_datas_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Table_ItemInfo other) {
    if (other == null) {
      return;
    }
    datas_.Add(other.datas_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          datas_.AddEntriesFrom(input, _repeated_datas_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          datas_.AddEntriesFrom(ref input, _repeated_datas_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
